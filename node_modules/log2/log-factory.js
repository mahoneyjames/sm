/*
LogFactory is a Singleton that manages writing log records to somewhere (at the moment it's console)
and keeping track of any log records that have been created, but not yet written. 

This allows us to write verbose logs without filling CloudWatch up with multiple lines of data

*/
const LogRecord = require("./log-record");

class LogFactory {  


    constructor() {
        this.decorateNewLogRecord = function(record){};
        this.entries = new Map();
        this.index=0;
        
        //this.output = console.out;
    }

    setLogRecordDecorator(builderFunction) {
        this.decorateNewLogRecord = builderFunction;
    }

    setLogRecordDecoratorToLambdaContext(context){
        //TODO - cope with a *new* request coming in when there is unsaved log data? i.e. a different request id...
        this.setLogRecordDecorator((record)=>{
            record.setContextData("awsRequestId", context.awsRequestId);
        });
    }
    

    getLogRecord(category, label,level, trackRecord=false)
    {
        let record = null;

        if(trackRecord==true)
        {
            const fullKey = `${category}-${label}`;
            if(!this.entries.has(fullKey))
            {
                record = new LogRecord(category, label, level, this.writeRecord);                
                this.entries.set(fullKey,record);
            }
            else
            {
                record = this.entries.get(fullKey);
            }
        }
        else
        {
            record = new LogRecord(category, label,level,this.writeRecord);
        }

        this.decorateNewLogRecord(record);

        return record;
    }

    writeUnsavedRecords()
    {
        for(const record of this.entries.values())
        {
            record.writeLogRecord();            
        }        

        this.entries.clear();
    }

    writeRecord(record)
    {
            //TODO support log, warn, info etc
            //TODO - support plugging in a different output so we can test stuff
           console.log(JSON.stringify(record));
           
            
        
    }
    
    
}

module.exports = new LogFactory();
